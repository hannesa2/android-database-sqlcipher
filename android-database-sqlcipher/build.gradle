apply plugin: "com.android.library"
apply plugin: "org.ec4j.editorconfig"
apply from: "native.gradle"
apply from: "maven.gradle"

android {

    compileSdkVersion "${compileAndroidSdkVersion}" as Integer

    defaultConfig {
        versionName "${clientVersionNumber}"
        minSdkVersion "${minimumAndroidSdkVersion}"
        targetSdkVersion "${targetAndroidSdkVersion}"
        versionCode 1
        versionName "${clientVersionNumber}"
        archivesBaseName = "${archivesBaseName}-${versionName}"


        buildConfigField "String", "GIT_COMMIT_SHA1", "\"" + getLatestGitHash() + "\""
        buildConfigField "String", "GIT_COMMIT_URL", "\"" + getGitCommitUrl() + "\""
        buildConfigField "String", "GIT_REPO_URL", "\"" + getGitRepoUrl() + "\""
        buildConfigField "String", "GIT_TAG_URL", "\"" + getGitRepoUrl() + "/tags" + "\""
        buildConfigField "String", "TRAVIS_BUILD_ID", "\"" + getTravisBuildId() + "\""
        buildConfigField "String", "TRAVIS_BUILD_URL", "\"" + getTravisBuildUrl() + "\""
        buildConfigField "String", "JITPACK_BUILD_URL", "\"" + getJitpackBuildUrl() + "\""
    }

    editorconfig {
        includes = ["src/**", "*.gradle"]
        excludes = ["src/main/external/sqlcipher/**", "src/main/external/openssl-*/**"]
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            debuggable false
            minifyEnabled false
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs "${rootProject.ext.nativeRootOutputDir}/libs"
        }
    }

    dependencies {
        implementation "androidx.sqlite:sqlite:2.0.1"
    }

    editorconfig {
        excludes = ['src/main/cpp/sqlite3.*',
                    'src/main/external/sqlcipher/**',
                    'src/main/external/openssl-*/**']
    }

    clean.dependsOn cleanNative
    check.dependsOn editorconfigCheck
    buildNative.mustRunAfter buildAmalgamation
    buildAmalgamation.mustRunAfter buildOpenSSL
    preBuild.dependsOn([buildOpenSSL, buildAmalgamation, copyAmalgamation, buildNative])
    buildNative.mustRunAfter(copyAmalgamation)
}

private static def getGitCommitCount() {
    try {
        return 'git rev-list --first-parent --count HEAD'.execute().text.trim() as Integer
    }
    catch (ignored) {
        return 0
    }
}

private static def getLatestGitHash() {
    try {
        return 'git rev-parse --short HEAD'.execute().text.trim()
    }
    catch (ignored) {
        return null
    }
}

static def getCreateTime() {
    def process = "date +%F".execute()
    return process.text.toString().trim()
}

static private def getVersionName() {
    println "Version: " + getCreateTime() + "." + getGitCommitCount() + "-" + getLatestGitHash()
    return getCreateTime() + "." + getGitCommitCount() + "-" + getLatestGitHash()
}

static def getGitCommitUrl() {
    return getGitRepoUrl() + "/commit/" + getLatestGitHash()
}

static def getGitRepoUrl() {
    def process = "git remote get-url origin --push".execute()
    return process.text.toString().replace(".git", "").trim()
}

static def getTravisBuildId() {
    return System.getenv("TRAVIS_BUILD_ID")
}

static def getTravisBuildUrl() {
    if (System.getenv("CI_SERVER")) {
        return getTravisBuildId()
    } else {
        println "buildID:" + "https://travis-ci.org/" + System.getenv("TRAVIS_REPO_SLUG") + "/builds/" + getTravisBuildId()
        println "TRAVIS_BUILD_DIR:" + System.getenv("TRAVIS_BUILD_DIR")
        println "TRAVIS_BUILD_ID:" + System.getenv("TRAVIS_BUILD_ID")
        println "TRAVIS_BUILD_NUMBER:" + System.getenv("TRAVIS_BUILD_NUMBER")
        println "TRAVIS_COMMIT:" + System.getenv("TRAVIS_COMMIT")
        println "TRAVIS_COMMIT_MESSAGE:" + System.getenv("TRAVIS_COMMIT_MESSAGE")
        println "TRAVIS_COMMIT_RANGE:" + System.getenv("TRAVIS_COMMIT_RANGE")
        println "TRAVIS_JOB_ID:" + System.getenv("TRAVIS_JOB_ID")
        println "TRAVIS_JOB_NUMBER:" + System.getenv("TRAVIS_JOB_NUMBER")
        return "https://travis-ci.org/" + System.getenv("TRAVIS_REPO_SLUG") + "/builds/" + getTravisBuildId()
    }
}

static def getJitpackBuildUrl() {
  def process = ("git describe --exact-match " + getLatestGitHash() + " 2>/dev/null | echo noTag").execute()
  return getGitRepoUrl().replace("https://github.com", "https://jitpack.io/com/github") + "/" + process.text.toString().replace("noTag", "").trim() + "/build.log"
}
